/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package lsystem

fun generateSVG(rewriter: Rewriter<TurtleCommand>, axiom: List<TurtleCommand>, n: Int, params: TurtleParams = TurtleParams()) {
    val turtleCommands = rewriter.rewrite(axiom, n)
    val turtle = Turtle(params)
    val path = turtle.interpret(turtleCommands)

    val canvas = Canvas(800, 600)
    val svg = canvas.toSVG(path)
    println(svg)
}

fun main() {

    // Edge rewriting
    val F = Turtle.createForwardDrawingCmd()
    val Fl = Turtle.createForwardDrawingCmd()
    val Fr = Turtle.createForwardDrawingCmd()
    val f = Turtle.createForwardNonDrawingCmd()
    val `+` = Turtle.createLeftCmd()
    val `-` = Turtle.createRightCmd()
    // Node rewriting
    val L = Turtle.createDummyCmd("L")
    val R = Turtle.createDummyCmd("R")

    val kochIslandGenerator = Rewriter<TurtleCommand>()
    kochIslandGenerator.addRule(F to listOf(F, `-`, F, `+`, F, `+`, F, F, `-`, F, `-`, F, `+`, F))
    //generateSVG(kochIslandGenerator, listOf(F, `-`, F, `-`, F, `-`, F), 3)

    val quadraticSnowflake = Rewriter<TurtleCommand>()
    quadraticSnowflake.addRule(F to listOf(F, `+`, F, `-`, F, `-`, F, `+`, F))
    //generateSVG(quadraticSnowflake, listOf(`-`, F), 4)

    var gosperCurve = Rewriter<TurtleCommand>()
    gosperCurve.addRule(Fl to listOf(Fl, `+`, Fr, `+`, `+`, Fr, `-`, Fl, `-`, `-`, Fl, Fl, `-`, Fr, `+`))
    gosperCurve.addRule(Fr to listOf(`-`, Fl, `+`, Fr, Fr, `+`, `+`, Fr, `+`, Fl, `-`, `-`, Fl, `-`, Fr))
    //generateSVG(gosperCurve, listOf(Fl), 4, TurtleParams(angleIncrementDegrees = 60.0))

    val macroTile3x3 = Rewriter<TurtleCommand>()
    macroTile3x3.addRule(L to listOf(L, F, `+`, R, F, R, `+`, F, L, `-`, F, `-`, L, F, L, F, L, `-`, F, R, F, R, `+`))
    macroTile3x3.addRule(R to listOf(`-`, L, F, L, F, `+`, R, F, R, F, R, `+`, F, `+`, R, F, `-`, L, F, L, `-`, F, R))
    //generateSVG(macroTile3x3, listOf(`-`, L), 3)

    val peanoCurve = Rewriter<TurtleCommand>()
    peanoCurve.addRule(L to listOf(L, F, R, F, L, `-`, F, `-`, R, F, L, F, R, `+`, F, `+`, L, F, R, F, L))
    peanoCurve.addRule(R to listOf(R, F, L, F, R, `+`, F, `+`, L, F, R, F, L, `-`, F, `-`, R, F, L, F, R))
    generateSVG(peanoCurve, listOf(L), 2)
}
